<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	creationComplete="initPlayer()" 
	xmlns:quiz="info.osmatrix.rmframework.quiz.*">
	<mx:LinkBar x="324" y="10" dataProvider="quizViewStack" width="236"> </mx:LinkBar>
	<mx:ViewStack x="24" y="44" id="quizViewStack" creationPolicy="all" width="536" height="375">
		<mx:Canvas label="关于本次测验" width="100%" height="100%">
		</mx:Canvas>
		<mx:Canvas id="questionCanvas" label="开始测验" width="536" height="375" x="24" y="27">
			<mx:Button x="272" y="325" label="上一题" height="31" width="68" id="prevButton"/>
			<mx:Button x="348" y="325" label="下一题" height="31" width="70" id="nextButton"/>
			<mx:Button x="456" y="325" label="完成" height="31" width="70"/>
			<mx:ProgressBar x="8" y="330" width="256" label="已完成" labelPlacement="left"/>
			<mx:TextArea x="10" y="10" width="516" height="43" text="本次测验概要信息。" fontSize="21"/>
			<quiz:QSingleChoice id="questionForm" x="10" y="70">
			</quiz:QSingleChoice>
		</mx:Canvas>
		<mx:Canvas label="测验结果" width="100%" height="100%">
		</mx:Canvas>
		
	</mx:ViewStack>

	<mx:Script>
		<![CDATA[
			import info.osmatrix.rmframework.quiz.*;
			
			private var templateXmlUrl:String;
			private var rootUrl:String;
			private var templateXml:XML;
			private var curIndex:int = 0 ;
			private var form:Object;
			
			private function initPlayer():void
			{
				// 
				prevButton.addEventListener(MouseEvent.CLICK, onPrevQuestion);
				nextButton.addEventListener(MouseEvent.CLICK, onNextQuestion);
				
				//
				form = questionForm;
			}
			
			// 外部通信接口
			public function loadXML(url:String, root:String):void
			{
				// 接受参数
				rootUrl = root;
				templateXmlUrl = rootUrl + url;
				
				// 加载xml文件
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, handleXmlLoaded);
				loader.addEventListener(IOErrorEvent.IO_ERROR, handleXmlFault);
	
				loader.load(new URLRequest(templateXmlUrl + "?rtp=" + String(Math.random() * 65535)));
				
			}
			
			private function handleXmlLoaded(evt:Event):void
			{
				templateXml = XML(evt.target.data);
				// player 本地设置	
				loadQuestion(0);
			}
			
			private function handleXmlFault(evt:Event):void
			{
				// 
			}
			
			private function onPrevQuestion(evt:Event):void
			{
				curIndex = curIndex - 1;
				loadQuestion(curIndex);

			}
			
			private function onNextQuestion(evt:Event):void
			{
				curIndex = curIndex + 1;
				loadQuestion(curIndex);				
			}
			
			private function loadQuestion(index:int):void
			{
				var question:XML = templateXml..item[index];
				var questionType:String = question.@type;
				switch(questionType)
				{
					case "singlechoice":
						form.getAnswer();
						questionCanvas.removeChild(DisplayObject(form));
						// 需要保存答案，以便用户下次再看时加载，所以直接保存到xml中是个好主意。
						// 加载时同样需要加载答案
						form = new QSingleChoice();
						form.x = 10;
						form.y = 70;
						questionCanvas.addChild(DisplayObject(form));
						form.loadQuestion(question);
						break;
					case "multiplechoice":
						form.getAnswer();
						questionCanvas.removeChild(DisplayObject(form));
						// 需要保存答案，以便用户下次再看时加载，所以直接保存到xml中是个好主意。
						// 加载时同样需要加载答案
						form = new QMultipleChoice();
						form.x = 10;
						form.y = 70;
						questionCanvas.addChild(DisplayObject(form));
						form.loadQuestion(question);
						break;
					default:
						break;
				}
				
				if(index == 0)
				{
					prevButton.enabled = false;				
				}else if( index == templateXml..item.length()-1 )
				{
					nextButton.enabled = false;		
				}else
				{
					prevButton.enabled = true;
					nextButton.enabled = true;
				}
			}
		]]>
	</mx:Script>
</mx:Application>
